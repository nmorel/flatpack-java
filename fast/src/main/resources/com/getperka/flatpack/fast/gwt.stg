/*
 * #%L
 * FlatPack Automatic Source Tool
 * %%
 * Copyright (C) 2012 Perka Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
entity(entity, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<docString(entity.docString)>
<entityDeclaration()> extends <entity.supertype> {

  /**
   * Returns the type name used to identify instances of <entity.simpleName> in a payload.
   */
  public static String typeName() {
    return "<entity.payloadName>";
  }

  <entity.properties:field(); separator="\n">

  <entity.properties:getter(); separator="\n">

  <entity.properties:setter(); separator="\n">
}
>>

/**
 * Extracted to ease formatting.
 */
entityDeclaration() ::= <%
<if(entity.baseType)>
  abstract class <entity.simpleName>Base
<else>
  public class <entity.simpleName>
<endif>
%>

enum(enum, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<docString(enum.docString)>
public enum <enum> {
  <enum.enumValues:{x |<x>}; separator=",\n">;
}
>>

field(property) ::= <%
private <property.type> <property.name>;
%>

/**
 * Emit a JavaDoc string, reflowed to fit the current context.
 */
docString(docString) ::= <<
<if(docString)>/**
 * <docString.chunks; wrap="\n * ", separator=" ">
 */<endif>
>>

/*
 * Generate a single getter.  If the property has documentation or special semantics, the
 * JavaDoc comment or relevant annotation(s) will be emitted. Note that the property roles
 * applied to the getter are reversed.
 */
getter(property) ::= <<
<docString(property.docString)>
public <property.type> get<property.getterName>() {
  return this.<property.name>;
}
>>

/**
 * Generate a single property setter.  Again, note the reversal of the property roles.
 */
setter(property) ::= <<
public void set<property.getterName>(<property.type> value) {
  <if(entity.persistent)>
  <names.DirtyFlag> flag = dirtyFlag("<property.name>");
  flag.set();
  this.<property.name> = <names.FlatPackCollections>.dirtyTracking(value, flag);
  <else>
  this.<property.name> = value;
  <endif>
}
>>

/**
 * Generate the TypeContext implementation
 */
typeContext(allEntities, packageName, namePrefix) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

public class <namePrefix>TypeContext extends com.getperka.flatpack.gwt.ext.BaseTypeContext {

  @Override
  protected void init() {
    <allEntities:typeContextEntity(); separator="\n">
  }

}
>>

/**
 * Add an entity to TypeContext.
 */
typeContextEntity(entity) ::= <%
add( <entity.simpleName>.typeName(), <entity.simpleName>.class, BaseCodexFactory.get().<entity.typeName>Codex() );
%>

/**
 * Generate the BaseCodexFactory.
 */
codexFactory(allEntities, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

/**
 * BaseCodexFactory used to get instance of all the Codex.
 */
public class BaseCodexFactory extends <names.AbstractCodexFactory> {

  private static BaseCodexFactory INSTANCE;

  public static BaseCodexFactory get()
  {
    if ( null == INSTANCE )
    {
      INSTANCE = com.google.gwt.core.client.GWT.create( BaseCodexFactory.class );
    }
    return INSTANCE;
  }

  <allEntities:factoryCodexField(); separator="\n">

  <allEntities:factoryCodexGetter(); separator="\n\n">
}
>>

/**
 * Add a codex field to the BaseCodexFactory.
 */
factoryCodexField(entity) ::= <%
private <entity.simpleName>Codex <entity.typeName>Codex;
%>

/**
 * Add a codex getter to the BaseCodexFactory.
 */
factoryCodexGetter(entity) ::= <<
/**
 * @return a {@link <entity.simpleName>Codex}
 */
public <entity.simpleName>Codex <entity.typeName>Codex() {
  if(null == <entity.typeName>Codex) {
    <entity.typeName>Codex = new <entity.simpleName>Codex();
    <entity.typeName>Codex.init();
  }
  return <entity.typeName>Codex;
}
>>

/**
 * Generate an EntityCodex.
 */
entityCodex(entity, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

import com.getperka.flatpack.gwt.codexes.*;

/**
 * EntityCodex for the entity {@link <entity.simpleName>}
 */
<entityCodexDeclaration()> extends EntityCodex\<<entity.simpleName>\> {

  @Override
  protected void initProperties( java.util.List\<com.getperka.flatpack.gwt.ext.Property\<<entity.simpleName>, ?\>\> properties ) {

    <entity.properties:propertyCodex(entity); separator="\n\n">

  }

  @Override
  public String getName() {
    return <entity.simpleName>.typeName();
  }

  @Override
  protected <entity.simpleName> createInstance()
  {
    return new <entity.simpleName>();
  }

}
>>

/**
 * Extracted to ease formatting.
 */
entityCodexDeclaration() ::= <%
<if(entity.baseType)>
  abstract class <entity.simpleName>BaseCodex
<else>
  public class <entity.simpleName>Codex
<endif>
%>

/*
 * Generate a property for entity codex.
 */
propertyCodex(property, entity) ::= <<
{
  // Property <property.name>
  com.getperka.flatpack.gwt.ext.Property\<<entity.simpleName>, <property.type>\> <property.name>Property =
    new com.getperka.flatpack.gwt.ext.Property\<<entity.simpleName>, <property.type>\>( "<property.name>", <property.type.codex> ) {
      @Override
      public <property.type> getValue( <entity.simpleName> object ) {
        return object.get<property.getterName>();
      }

      @Override
      public void setValue( <entity.simpleName> object, <property.type> value ) {
        object.set<property.getterName>( value );
      }
    };
  <property.name>Property.setDeepTraversalOnly(<property.deepTraversalOnly>);
  <property.name>Property.setEmbedded(<property.embedded>);
  <property.name>Property.setEnclosingTypeName(getName());
  <property.name>Property.setSuppressDefaultValue(<property.suppressDefaultValue>);
<if(property.impliedProperty)>
  // Implied property <property.impliedProperty.name>
  com.getperka.flatpack.gwt.ext.Property\<<property.type.impliedType>, <property.impliedProperty.type>\> <property.impliedProperty.name>ImpliedProperty = 
    new com.getperka.flatpack.gwt.ext.Property\<<property.type.impliedType>, <property.impliedProperty.type>\>( "<property.impliedProperty.name>", <property.impliedProperty.type.codex> ) {
      @Override
      public <property.impliedProperty.type> getValue( <property.type.impliedType> object ) {
        return object.get<property.impliedProperty.getterName>();
      }

      @Override
      public void setValue( <property.type.impliedType> object, <property.impliedProperty.type> value ) {
        object.set<property.impliedProperty.getterName>( value );
      }
    };
  <property.impliedProperty.name>ImpliedProperty.setEnclosingTypeName("<property.impliedProperty.enclosingTypeName>");
  <property.name>Property.setImpliedProperty(<property.impliedProperty.name>ImpliedProperty);
<endif>
  properties.add( <property.name>Property );
}
>>

/**
 * Generate an API accessor stub.
 */
api(api, packageName, namePrefix, apiIsPublic) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<if(apiIsPublic)>public<endif> class <namePrefix>Api extends <names.ApiBase> {
  public <namePrefix>Api() {
    super(new <namePrefix>TypeContext());
  }

  public <namePrefix>Api(com.getperka.flatpack.gwt.ext.TypeContext typeContext) {
    super(typeContext);
  }

  <api.endpoints:endpoint(); separator="\n">
}
>>

/**
 * Select the kind of endpoint, either one that's documented to return a FlatPackEntity
 * or just return a HttpURLConnection for anything else.
 */
endpoint(end) ::= <%
<if(end.returnType)>
  <endpointFlatPack(end)>
<endif>
%>

/**
 * Generates interfaces and methods for API methods that are fully-flatpacked.
 */
endpointFlatPack(end) ::= <<
public interface <end.javaNameUpcase> extends <names.FlatPackRequest>\<<end.javaNameUpcase>, <if(end.entity)><end.entity><else>Void<endif>, <end.returnType>\> {
  <end.queryParameters:endpointQueryParameterStub(); separator="\n">
}

private class <end.javaNameUpcase>Impl
    extends <names.FlatPackRequestBase>\<<end.javaNameUpcase>, <if(end.entity)><end.entity><else>Void<endif>, <end.returnType>\>
    implements <end.javaNameUpcase> {
  public <end.javaNameUpcase>Impl(Object... args) {
    super(<namePrefix>Api.this, com.google.gwt.http.client.RequestBuilder.<end.method>, "<end.pathDecoded>", <if(end.entity)><end.entity.codex><else>BaseCodexFactory.get().voidCodex()<endif>, <end.returnType.codex>, args);
  }
  <end.queryParameters:endpointQueryParameterImpl(); separator="\n">
}

<docString(end.docString)>
public <end.javaNameUpcase> <end.javaName>(<endpointArgList()>) {
  <end.javaNameUpcase>Impl toReturn =
      new <end.javaNameUpcase>Impl(<end.pathParameters:{x|<x.name>}; separator=", ">);
  <if(end.entity)>toReturn.setEntity(entity);<endif>
  return toReturn;
}
>>

endpointArgList() ::= <%
<if(end.entity && end.pathParameters)>
  <end.entity> entity, <end.pathParameters:{x |<x.type> <x.name>}; separator=", ">
<elseif(end.entity)>
  <end.entity> entity
<else>
  <end.pathParameters:{x |<x.type> <x.name>}; separator=", ">
<endif>
%>

/**
 * The names of the path parameter arguments.
 */
endpointPathParameters() ::= <%
<end.pathParameters:{x |<x.name>}; separator=", ">
%>

/**
 * Create a stub method declaration for a request interface.
 */
endpointQueryParameterStub(param) ::= <<
<docString(param.docString)>
<end.javaNameUpcase> with<param.javaNameUpcase>(<param.type> <param.name>);
>>

endpointQueryParameterImpl(param) ::= <<
public <end.javaNameUpcase> with<param.javaNameUpcase>(<param.type> <param.name>) {
  return queryParameter("<param.name>", <param.name>);
}
>>

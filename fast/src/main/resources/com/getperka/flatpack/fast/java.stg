/*
 * #%L
 * FlatPack Automatic Source Tool
 * %%
 * Copyright (C) 2012 Perka Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
entity(entity, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<docString(entity.docString)>
@<names.JsonTypeName>("<entity.payloadName>")
<entityDeclaration()> extends <entity.supertype> {
  /**
   * Returns the type name used to identify instances of <entity.simpleName> in a payload.
   */
  public static String typeName() {
    return "<entity.payloadName>";
  }

  <entity.properties:field(); separator="\n">
  <entity.properties:getter(); separator="\n">
  <entity.properties:setter(); separator="\n">
}
>>

/**
 * Extracted to ease formatting.
 */
entityDeclaration() ::= <%
<if(entity.baseType)>
  abstract class <entity.simpleName>Base
<else>
  public class <entity.simpleName>
<endif> 
%>

enum(enum, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<docString(enum.docString)>
public enum <enum> {
  <enum.enumValues:{x |<x>}; separator=",\n">;
}
>>

field(property) ::= <%
private <property.type> <property.getterName>;
%>

/**
 * Emit a JavaDoc string, reflowed to fit the current context.
 */
docString(docString) ::= <<
<if(docString)>/**
 * <docString.chunks; wrap="\n * ", separator=" ">
 */<endif>
>>

/*
 * Generate a single getter.  If the property has documentation or special semantics, the
 * JavaDoc comment or relevant annotation(s) will be emitted. Note that the property roles
 * applied to the getter are reversed.
 */
getter(property) ::= <<
<docString(property.docString)>
<if(property.embedded)>@<names.Embedded><endif>
<if(property.inheritPrincipal)>@<names.InheritPrincipal><endif>
<if(property.suppressDefaultValue)>@<names.SuppressDefaultValue><endif>
<if(property.needsImplied)>@<names.SparseCollection>("<property.impliedProperty.name>")<endif>
<propertyRoles("setter")>
public <property.type> get<property.getterName>() {
  return this.<property.getterName>;
}
>>

/**
 * Generate a single property setter.  Again, note the reversal of the property roles.
 */
setter(property) ::= <<
<propertyRoles("getter")>
public void set<property.getterName>(<property.type> value) {
  <if(entity.persistent)>
  <names.DirtyFlag> flag = dirtyFlag("<property.name>");
  flag.set();
  this.<property.getterName> = <names.FlatPackCollections>.dirtyTracking(value, flag);
  <else>
  this.<property.getterName> = value;
  <endif>
}
>>

/**
 * Create property security annotation. The kind parameter should be a string
 * either "getter" or "setter".  The property.({template}) allows for dynamic lookup
 * based on the value of kind.
 */
propertyRoles(kind) ::= <%
<if(property.({<kind>PermitAll}))>
  @<names.PermitAll>
<elseif(property.({<kind>RoleNames}))>
  @<names.RolesAllowed>({<property.({<kind>RoleNames}):{x|"<x>"}; separator=", ">})
<endif>
%>

/**
 * Generate an API accessor stub.
 */
api(api, packageName, namePrefix, apiIsPublic) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<if(apiIsPublic)>public<endif> class <namePrefix>Api extends <names.ApiBase> {
  public <namePrefix>Api(<names.FlatPack> flatpack) {
    super(flatpack);
  }

  <api.endpoints:endpoint(); separator="\n">
}
>>

/**
 * Select the kind of endpoint, either one that's documented to return a FlatPackEntity
 * or just return a HttpURLConnection for anything else.
 */
endpoint(end) ::= <%
<if(end.returnType)>
  <endpointFlatPack(end)>
<else>
  <endpointConnectionResponse(end)>
<endif> 
%>

/**
 * Generates interfaces and methods for API methods that don't use flatpack.
 */
endpointConnectionResponse(end) ::= <<
public interface <end.javaNameUpcase> extends <names.Request>\<<end.javaNameUpcase>, <names.HttpURLConnection>\> {
  <end.queryParameters:endpointQueryParameterStub(); separator="\n">
}

private class <end.javaNameUpcase>Impl
    extends <names.ConnectionRequestBase>\<<end.javaNameUpcase>\>
    implements <end.javaNameUpcase> {
  public <end.javaNameUpcase>Impl(Object... args) {
    super(<namePrefix>Api.this, "<end.method>", "<end.pathDecoded>", false, args);
  }
  <end.queryParameters:endpointQueryParameterImpl(); separator="\n">
}

<docString(end.docString)>
public <end.javaNameUpcase> <end.javaName>(<endpointArgList()>) {
  <end.javaNameUpcase>Impl toReturn =
      new <end.javaNameUpcase>Impl(<end.pathParameters:{x|<x.name>}; separator=", ">);
  <if(end.entity)>toReturn.setEntity(entity);<endif>
  return toReturn;
}
>>

/**
 * Generates interfaces and methods for API methods that are fully-flatpacked.
 */
endpointFlatPack(end) ::= <<
public interface <end.javaNameUpcase> extends <names.FlatPackRequest>\<<end.javaNameUpcase>, <end.returnType>\> {
  <end.queryParameters:endpointQueryParameterStub(); separator="\n">
}

private class <end.javaNameUpcase>Impl
    extends <names.FlatPackRequestBase>\<<end.javaNameUpcase>, <end.returnType>\>
    implements <end.javaNameUpcase> {
  public <end.javaNameUpcase>Impl(Object... args) {
    super(<namePrefix>Api.this, <endpointCreateType(end.returnType)>, "<end.method>", "<end.pathDecoded>", <end.hasPayload>, args);
  }
  <end.queryParameters:endpointQueryParameterImpl(); separator="\n">
}

<docString(end.docString)>
public <end.javaNameUpcase> <end.javaName>(<endpointArgList()>) {
  <end.javaNameUpcase>Impl toReturn =
      new <end.javaNameUpcase>Impl(<end.pathParameters:{x|<x.name>}; separator=", ">);
  <if(end.entity)>toReturn.setEntity(entity);<endif>
  return toReturn;
}
>>

endpointArgList() ::= <%
<if(end.entity && end.pathParameters)>
  <end.entity> entity, <end.pathParameters:{x |<x.type> <x.name>}; separator=", ">
<elseif(end.entity)>
  <end.entity> entity
<else>
  <end.pathParameters:{x |<x.type> <x.name>}; separator=", ">
<endif>
%>

/**
 * Make a call to FlatPackTypes.createType() for a synthetic Type reference.
 */
endpointCreateType(type) ::= <%
<names.FlatPackTypes>.createType(<type.flatTypes:{x|<x>.class}; separator=", ">)
%>

/**
 * The names of the path parameter arguments.
 */
endpointPathParameters() ::= <%
<end.pathParameters:{x |<x.name>}; separator=", ">
%>

/**
 * Create a stub method declaration for a request interface.
 */
endpointQueryParameterStub(param) ::= <<
<docString(param.docString)>
<end.javaNameUpcase> with<param.javaNameUpcase>(<param.type> <param.name>);
>>

endpointQueryParameterImpl(param) ::= <<
public <end.javaNameUpcase> with<param.javaNameUpcase>(<param.type> <param.name>) {
  return queryParameter("<param.name>", <param.name>);
}
>>

typeSource(allEntities, packageName, namePrefix) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;
public class <namePrefix>TypeSource implements <names.TypeSource> {
  private static final <names.Set>\<Class\<?\>\> classes = <names.Collections>.unmodifiableSet(
    new <names.HashSet>\<Class\<?\>\>(<names.Arrays>.\<Class\<?\>\>asList(
      <allEntities:{x |<x>.class}; wrap, separator=", ">
    )));
  private static final <names.TypeSource> instance = new <namePrefix>TypeSource();
  
  public static <names.TypeSource> get() {
    return instance;
  }

  public <names.Set>\<Class\<?\>\> getTypes() {
    return classes;
  }
  
  private <namePrefix>TypeSource(){}
}
>>
